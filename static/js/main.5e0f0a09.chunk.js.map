{"version":3,"sources":["App.js","serviceWorker.js","index.js","Metal_Gong-Dianakc-109711828.wav"],"names":["count","timer","TimerSettings","props","className","id","ident","title","onClick","handleDec","handleInc","App","useState","breakCount","setBreakCount","sessionCount","setSessionCount","undefined","period","setPeriod","playOn","setPlayOn","clockCount","setClockCount","currentTimer","setCurrentTimer","handleDecrease","countType","handleIncrease","breakProps","sessionProps","preload","src","gong","clearInterval","setInterval","document","getElementById","play","inp","minutes","Math","floor","seconds","timeLoad","pause","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5e0f0a09.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport 'bootstrap';\r\nimport gong from './Metal_Gong-Dianakc-109711828.wav';\r\n\r\nlet count = 25 * 60;\r\nlet timer = \"Session\";\r\n\r\nconst App = () => { \r\n  const [breakCount, setBreakCount] = useState(5);\r\n  const [sessionCount, setSessionCount] = useState(25);\r\n  const [period, setPeriod] = useState(undefined); \r\n  const [playOn, setPlayOn] = useState(false); \r\n  const [clockCount, setClockCount] = useState(count);\r\n  const [currentTimer, setCurrentTimer] = useState(timer);\r\n\r\n  const handleStartStop = () => {\r\n    if (playOn){\r\n      setPlayOn(false);\r\n      setPeriod(clearInterval(period));\r\n    }else if(!playOn){\r\n      setPlayOn(true);\r\n      setPeriod(setInterval(() => {      \r\n        if(count === 0){\r\n          count = (timer === \"Session\") ? (breakCount * 60) : (sessionCount * 60);\r\n          timer = (timer === \"Session\") ? \"Break\" : \"Session\";\r\n          setClockCount(count);  \r\n          setCurrentTimer(timer);\r\n          document.getElementById(\"beep\").play();               \r\n        }else{\r\n          count--;\r\n          setClockCount(count);     \r\n        } \r\n      }, 1000))\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {  \r\n    setBreakCount(5);\r\n    setSessionCount(25);\r\n    setPlayOn(false);\r\n    count = 25 * 60;\r\n    setClockCount(count);\r\n    timer = \"Session\";\r\n    setCurrentTimer(timer);\r\n    setPeriod(clearInterval(period));\r\n    document.getElementById(\"beep\").pause();\r\n    document.getElementById(\"beep\").currentTime = 0;\r\n  }\r\n\r\n  const handleDecrease = (countType,timer) => {\r\n    if (countType > 1){\r\n      if (!playOn && timer === timer){\r\n        (timer === 'Break') ? setBreakCount(countType - 1) : setSessionCount(countType - 1);\r\n        count = (countType - 1 ) * 60;\r\n        setClockCount(count);     \r\n      }else if(!playOn && currentTimer === !timer){\r\n        (timer === 'Break') ? setBreakCount(countType - 1) : setSessionCount(countType - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleIncrease = (countType,timer) => {\r\n    if (countType < 60){\r\n      if (!playOn && timer === timer){\r\n        (timer === 'Break') ? setBreakCount(countType + 1) : setSessionCount(countType + 1);\r\n        count = (countType + 1 ) * 60;\r\n        setClockCount(count); \r\n      }else if(!playOn && currentTimer === !timer){\r\n        (timer === 'Break') ? setBreakCount(countType + 1) : setSessionCount(countType + 1);\r\n      }\r\n    }\r\n  }  \r\n\r\n  const breakProps = {\r\n    title: 'Break Length',\r\n    count: breakCount,\r\n    ident: 'break',    \r\n    handleDec:  () => handleDecrease(breakCount,'Break'),\r\n    handleInc: () => handleIncrease(breakCount,'Break')\r\n  }\r\n\r\n  const sessionProps = {\r\n    title: 'Session Length',\r\n    count: sessionCount,\r\n    ident: 'session',    \r\n    handleDec: () => handleDecrease(sessionCount,'Session'),\r\n    handleInc: () => handleIncrease(sessionCount,'Session')\r\n  }\r\n\r\n  const timeLoad = (inp) =>{\r\n    let minutes = Math.floor(inp / 60);\r\n    let seconds = inp % 60;    \r\n    minutes = minutes < 10 ? ('0'+minutes) : minutes;\r\n    seconds = seconds < 10 ? ('0'+seconds) : seconds; \r\n    return minutes + ':' + seconds;\r\n  }\r\n\r\n  return (\r\n    <div className= \"container\">   \r\n      <h1 className=\"text-center\">Pomodoro Clock</h1>\r\n      <div className= \"text-center\" id=\"options\">\r\n        <TimerSettings {...breakProps}/>\r\n        <TimerSettings {...sessionProps}/>\r\n        <audio id=\"beep\" preload=\"auto\" src={gong}/>\r\n      </div>\r\n      <div className= \"text-center\">\r\n        <span id=\"timer-label\">{currentTimer}</span>  \r\n      </div> \r\n      <button id=\"start_stop\" onClick={handleStartStop} >\r\n        <div className=\"pie degree\">\r\n        <span id=\"time-left\">{timeLoad(clockCount)}</span> \r\n        </div>       \r\n      </button>  \r\n      <button id=\"reset\" onClick={handleReset} className=\"text-center\">\r\n        RESET       \r\n      </button> \r\n    </div>\r\n  )\r\n}\r\n\r\nconst TimerSettings = (props) => {\r\n  return (\r\n    <div className = \"choiceDiv text-center\">\r\n      <h2 id ={`${props.ident}-label`}>{props.title}</h2>\r\n      <div className = \"selectDiv\">\r\n        <button  onClick={props.handleDec} id ={`${props.ident}-decrement`}>-</button>\r\n          <p id={`${props.ident}-length`}>{props.count}</p>\r\n        <button  onClick={props.handleInc} id ={`${props.ident}-increment`}>+</button>\r\n      </div>    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Metal_Gong-Dianakc-109711828.bd71546a.wav\";"],"sourceRoot":""}