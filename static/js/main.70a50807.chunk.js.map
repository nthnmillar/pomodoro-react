{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BreakLength","className","id","onClick","SessionLength","TimeLabel","Time","PieButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAIMA,G,KAAc,WAClB,OACE,yBAAKC,UAAY,yBACf,wBAAIC,GAAI,eAAR,gBACA,yBAAKD,UAAY,aACf,4BAAQE,QAAQ,GAAGD,GAAI,mBAAvB,KACA,uBAAGA,GAAG,iBACN,4BAAQC,QAAQ,GAAGD,GAAI,mBAAvB,SAOFE,EAAgB,WACpB,OACE,yBAAKH,UAAY,yBACf,wBAAIC,GAAI,iBAAR,kBACA,yBAAKD,UAAY,aACf,4BAAQE,QAAQ,GAAGD,GAAI,qBAAvB,KACA,uBAAGA,GAAG,iBACN,4BAAQC,QAAQ,GAAGD,GAAI,qBAAvB,QAMFG,EAAY,WAChB,OACE,oCACE,0BAAMH,GAAG,kBAKTI,EAAO,WACX,OACE,oCACG,0BAAMJ,GAAG,gBAKVK,EAAY,WAChB,OACE,oCACE,4BAAQL,GAAG,aAAaC,QAAQ,IAC9B,yBAAKF,UAAU,kBAwBRO,EAlBH,WACV,OACI,yBAAKP,UAAW,aACd,wBAAIA,UAAU,eAAd,kBACE,yBAAKA,UAAW,cAAcC,GAAG,WAC/B,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKD,UAAW,eACd,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QC1DUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.70a50807.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap';\r\n\r\n\r\nconst BreakLength = () => {\r\n  return (\r\n    <div className = \"choiceDiv text-center\">\r\n      <h2 id =\"break-label\">BREAK LENGTH</h2>\r\n      <div className = \"selectDiv\">\r\n        <button onClick=\"\" id =\"break-decrement\">-</button>\r\n        <p id=\"break-length\"/>\r\n        <button onClick=\"\" id =\"break-increment\">+</button>\r\n      </div>    \r\n    </div> \r\n  )\r\n}\r\n\r\n\r\nconst SessionLength = () => {\r\n  return (\r\n    <div className = \"choiceDiv text-center\">\r\n      <h2 id =\"session-label\">SESSION LENGTH</h2>\r\n      <div className = \"selectDiv\">\r\n        <button onClick=\"\" id =\"session-decrement\">-</button>\r\n        <p id=\"break-length\"/>\r\n        <button onClick=\"\" id =\"session-increment\">+</button>\r\n      </div>    \r\n    </div> \r\n  )\r\n}\r\n\r\nconst TimeLabel = () => {\r\n  return (\r\n    <>\r\n      <span id=\"timer-label\"></span>      \r\n    </>\r\n  )\r\n}\r\n\r\nconst Time = () => {\r\n  return (\r\n    <>\r\n       <span id=\"time-left\"></span> \r\n    </>\r\n    )\r\n}\r\n\r\nconst PieButton = () => {\r\n  return (\r\n    <>\r\n      <button id=\"start_stop\" onClick=\"\">\r\n        <div className=\"pie degree\"/>       \r\n      </button>  \r\n    </>\r\n    )\r\n}\r\n\r\nconst App = () =>{ \r\n  return (\r\n      <div className= \"container\">   \r\n        <h1 className=\"text-center\">Pomodoro Clock</h1>\r\n          <div className= \"text-center\" id=\"options\">\r\n            <BreakLength/>\r\n            <SessionLength/>\r\n          </div>\r\n          <div className= \"text-center\">\r\n            <TimeLabel/>\r\n            <br/>\r\n            <Time/>\r\n          </div> \r\n          <PieButton/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\nimport React from 'react';\r\nimport 'bootstrap';\r\nimport { Provider, connect } from 'react-redux';\r\nimport store from \"./store\";\r\nimport {displayEntryAction, displaySumAction} from './actions/displayActions';\r\nimport {acReset, ceReset, numPress, zeroPress, decPointPress, equalPress, operatorPress} from './calculate'\r\n\r\n// mapStatetoProps\r\nconst mapStatetoProps = (state => {\r\n  return {\r\n    entry:state.mathEntry.entry,\r\n    sum:state.mathSum.sum,\r\n  };\r\n});\r\n\r\n// mapDispatchToProps\r\nconst mapDispatchToProps = dispatch => ({\r\n    displayEntry: () => dispatch(displayEntryAction()),\r\n    displaySum: () => dispatch(displaySumAction()),\r\n});\r\n\r\nconst DisplayEntry = (props) => {\r\n  return (\r\n    <>\r\n      <p dangerouslySetInnerHTML={{ __html:props.entry}} id=\"display\"></p>\r\n    </>\r\n  )\r\n}\r\n\r\nconst DisplaySum = (props) => {\r\n  return (\r\n    <>\r\n      <p dangerouslySetInnerHTML={{ __html:props.sum}} id=\"disString\"></p>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Buttons = () => {\r\n  return (\r\n    <>\r\n      <button onClick={acReset} id=\"clear\">AC</button>\r\n      <button onClick={ceReset} id=\"CE\">CE</button>\r\n      <button onClick={() => {operatorPress(\"&#247;\")}} id=\"divide\">&#247;</button>\r\n      <button onClick={() => {operatorPress(\"&#215;\")}} id=\"multiply\">&#215;</button>  \r\n      <button onClick={() => {numPress(\"7\")}} id=\"seven\">7</button>\r\n      <button onClick={() => {numPress(\"8\")}} id=\"eight\">8</button>\r\n      <button onClick={() => {numPress(\"9\")}} id=\"nine\">9</button>\r\n      <button onClick={() => {operatorPress(\"-\")}} id=\"subtract\">-</button>   \r\n      <button onClick={() => {numPress(\"4\")}} id=\"four\">4</button>\r\n      <button onClick={() => {numPress(\"5\")}} id=\"five\">5</button>\r\n      <button onClick={() => {numPress(\"6\")}} id=\"six\">6</button>\r\n      <button onClick={() => {operatorPress(\"+\")}} id=\"add\">+</button>    \r\n      <button onClick={() => {numPress(\"1\")}} id=\"one\">1</button>\r\n      <button onClick={() => {numPress(\"2\")}} id=\"two\">2</button>\r\n      <button onClick={() => {numPress(\"3\")}} id=\"three\">3</button>  \r\n      <button onClick={equalPress} id=\"equals\">=</button>     \r\n      <button onClick={() => {zeroPress(\"0\")}} id=\"zero\">0</button>\r\n      <button onClick={decPointPress} id=\"decimal\">.</button> \r\n    </> \r\n  )\r\n}\r\n\r\nconst ConnectedDisplayEntry = connect(mapStatetoProps, mapDispatchToProps)(DisplayEntry);\r\nconst ConnectedDisplaySum = connect(mapStatetoProps, mapDispatchToProps)(DisplaySum);\r\n\r\nconst App = () =>{ \r\n  return (\r\n    <Provider store={store}>\r\n      <div id=\"calcBase\" className= \"container\">   \r\n        <div id=\"padDiv\">\r\n          <h1 className=\"text-center\">CALCULATOR</h1>\r\n          <div id=\"screen\" className=\"text-right\">\r\n            <ConnectedDisplayEntry/>\r\n            <ConnectedDisplaySum/>\r\n          </div>\r\n          <Buttons/>\r\n        </div>          \r\n      </div>]\r\n    </Provider>  \r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}